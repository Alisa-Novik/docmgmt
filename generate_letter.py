from dotenv import load_dotenv
import os
from langchain_openai import OpenAIEmbeddings, ChatOpenAI
from langchain_community.vectorstores import FAISS
from langchain.chains import LLMChain
from langchain.prompts import PromptTemplate
from langchain.text_splitter import RecursiveCharacterTextSplitter

load_dotenv()

retriever = FAISS.load_local(
    "faiss_index",
    OpenAIEmbeddings(),
    allow_dangerous_deserialization=True
).as_retriever()

llm = ChatOpenAI(
    model_name="gpt-4.1",
    temperature=0.7,
    openai_api_key=os.getenv("OPENAI_API_KEY"),
    max_tokens=800
)

prompt = PromptTemplate.from_template(
    """
–¢—ã –≤—ã—Å—Ç—É–ø–∞–µ—à—å –≤ —Ä–æ–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—è. –°—Ñ–æ—Ä–º–∏—Ä—É–π —Å–≤—è–∑–Ω—ã–π –∞–±–∑–∞—Ü –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ ¬´{section_title}¬ª —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞.

üìå –§–æ—Ä–º–∞—Ç: –¥–µ–ª–æ–≤–æ–π, –Ω–æ –∂–∏–≤–æ–π –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ (–Ω–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π, –Ω–µ —Å—É—Ö–æ–π).
üìå –¢–æ–Ω: —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã–π, —É–≤–µ—Ä–µ–Ω–Ω—ã–π, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –≥—Ä–∞–º–æ—Ç–Ω—ã–π, –±–µ–∑ –ø–∞—Ñ–æ—Å–∞ –∏ —É–∫—Ä–∞—à–∞—Ç–µ–ª—å—Å—Ç–≤.
üìå –°—Ç–∏–ª—å: –±–ª–∏–∂–µ –∫ —Ç–æ–º—É, –∫–∞–∫ –∏–Ω–∂–µ–Ω–µ—Ä –∏–ª–∏ —Ç–µ—Ö–ª–∏–¥ –æ–±—ä—è—Å–Ω—è–µ—Ç –¥—Ä—É–≥–æ–º—É –∏–Ω–∂–µ–Ω–µ—Ä—É ‚Äî –ø–æ –¥–µ–ª—É, –±–µ–∑ –¥–µ–∂—É—Ä–Ω—ã—Ö —Ñ—Ä–∞–∑.
üìå –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞: –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ö–≤–∞–ª–∏—Ç—å, –∞ –æ–±—ä—è—Å–Ω–∏—Ç—å, **–ø–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–æ –≤–∞–∂–Ω–æ** ‚Äî –æ—Å–æ–±–µ–Ω–Ω–æ —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –∏–Ω–∂–µ–Ω–µ—Ä–∞, —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –≤ –°–®–ê, –∏ –∫–∞–∫ —ç—Ç–æ —Å–æ–æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Å –ø—Ä–∞–∫—Ç–∏–∫–æ–π –≤ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏.
üìå –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –∏–∑ –¥—Ä—É–≥–∏—Ö —Ä–∞–∑–¥–µ–ª–æ–≤, –Ω–æ –º–æ–∂–µ—à—å —Å—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ –Ω–∏—Ö, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ. –ü–æ–≤—Ç–æ—Ä–æ–≤ –∏–∑–±–µ–≥–∞–π.
üìå –ë—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ω –∫ –¥–µ—Ç–∞–ª—è–º: –µ—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, –æ–±—ä—è—Å–Ω–∏, –≤ —á—ë–º –∑—Ä–µ–ª–æ—Å—Ç—å. –ï—Å–ª–∏ –ª–∏–¥–µ—Ä—Å—Ç–≤–æ ‚Äî –ø–æ–∫–∞–∂–∏ —ç—Ç–æ –≤ –¥–µ–π—Å—Ç–≤–∏—è—Ö.

üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:
- –û–ø—ã—Ç –≤ Oracle Health: –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö, Patient Administration Service, —Å–æ–±–ª—é–¥–µ–Ω–∏–µ HIPAA, –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å 99.99%, —Ä–∞–±–æ—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏, EHR-agnostic —Ä–µ—à–µ–Ω–∏—è.
- –ü—Ä–µ–¥—ã–¥—É—â–∏–π –æ–ø—ã—Ç: Eleving Group ‚Äî –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–µ —Ä–∞—Å—á—ë—Ç–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–∏–±—ã–ª–∏, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –Ω–∞ Azure.
- Open-source: katana (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –º–∏–∫—Ä–æ—Ñ—Ä–µ–π–º–≤–æ—Ä–∫), hlox (DSL –¥–ª—è –∞—É–¥–∏—Ç–∞ –≤ healthcare).
- –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –±—ç–∫–≥—Ä–∞—É–Ω–¥: –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ, —É—Å—Ç–æ–π—á–∏–≤—ã–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã.
- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞: –±—ã—Å—Ç—Ä–æ –≤—Ö–æ–¥–∏—Ç –≤ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—É—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∫–≤–æ–∑–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –æ—Ç –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π.
- –£–º–µ–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç—å –æ —Ä–∏—Å–∫–∞—Ö, —á–µ—Å—Ç–Ω–æ –∫–æ–º–º—É–Ω–∏—Ü–∏—Ä—É–µ—Ç —Å —Å–æ—Å–µ–¥–Ω–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏, –≤—ã—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—É—é –∫—É–ª—å—Ç—É—Ä—É.

üë§ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å: {recommender}  
üîñ –†–∞–∑–¥–µ–ª: {section_title}  
üìé –ö–æ–Ω—Ç–µ–∫—Å—Ç:  
{context}
"""
)

chain = LLMChain(llm=llm, prompt=prompt)

sections = {
    "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ": "–æ–ø–∏—Å–∞–Ω–∏–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—è —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º",
    "–û–ø—ã—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞": "–æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏ –°–®–ê –∏ –ï–≤—Ä–æ–ø—ã",
    "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è": "–æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ –æ—Ç—Ä–∞—Å–ª–∏",
    "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ä–æ–ª—å": "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ä–æ–ª—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –∫–æ–º–ø–∞–Ω–∏—é",
    "–î–∞–Ω–Ω—ã–µ –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏": "–Ω–∞–≥—Ä–∞–¥—ã –∫–æ–º–ø–∞–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥ –æ–±–æ—Ä–æ—Ç –∫–ª–∏–µ–Ω—Ç—ã",
    "–ü—Ä–æ–µ–∫—Ç—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã": "–ø—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–µ–∫—Ç–æ–≤ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å —Ü–∏—Ñ—Ä–∞–º–∏"
}

splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=100)
result_blocks = []

for title, query in sections.items():
    docs = retriever.get_relevant_documents(query)
    raw_context = "\n\n".join(d.page_content for d in docs)
    context_chunks = splitter.split_text(raw_context)
    context = "\n\n".join(context_chunks[:15])
    text = chain.invoke(
        {
            "section_title": title, 
            "context": context,
            "recommender": "Alex Blinov, Oracle Senior Engineering Manager"
        }
    )["text"]
    result_blocks.append(f"**{title}**\n{text.strip()}")

final_letter = "\n\n".join(result_blocks)

os.makedirs("letters", exist_ok=True)
with open("letters/letter.txt", "w", encoding="utf-8") as f:
    f.write(final_letter)
